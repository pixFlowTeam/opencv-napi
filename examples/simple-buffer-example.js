const OpenCV = require("../lib/index");
const fs = require("fs");

/**
 * ÁÆÄÂçïÁºìÂÜ≤Âå∫ API Á§∫‰æã
 *
 * ÊºîÁ§∫Êñ∞ÁºìÂÜ≤Âå∫ API ÁöÑÊúÄÂ∏∏ËßÅÁî®‰æãÔºö
 * - ‰∏∫ Web ‰ΩøÁî®ÂàõÂª∫ JPEG ÁºìÂÜ≤Âå∫
 * - Âú®ÂÜÖÂ≠ò‰∏≠ÂàõÂª∫Áº©Áï•Âõæ
 * - ‰ΩøÁî®ÁºìÂÜ≤Âå∫ËÄå‰∏çÊòØÊñá‰ª∂
 */

async function simpleBufferExample(inputFile) {
  console.log("üì∏ Simple Buffer API Example");
  console.log("============================");
  console.log(`üìÅ Processing: ${inputFile}\n`);

  const processor = new OpenCV();

  try {
    // Âä†ËΩΩÂπ∂Â§ÑÁêÜ ÂõæÂÉèÊñá‰ª∂
    console.log("üîÑ Loading RAW file...");
    await processor.imread(inputFile);

    console.log("‚öôÔ∏è Processing image...");
    await processor.processImage();

    // ============== Á§∫‰æã 1Ôºö‰∏∫ Web ‰ΩøÁî®ÂàõÂª∫ JPEG ÁºìÂÜ≤Âå∫ ==============
    console.log("\nüì∏ Creating web-optimized JPEG buffer...");
    const webJpeg = await processor.createJPEGBuffer({
      quality: 85,
      width: 1920, // Ë∞ÉÊï¥Âà∞ 1920px ÂÆΩÂ∫¶
      progressive: true, // Êõ¥ÈÄÇÂêà Web Âä†ËΩΩ
    });

    console.log(`‚úÖ Web JPEG created: ${webJpeg.buffer.length} bytes`);
    console.log(
      `   Size: ${webJpeg.metadata.outputDimensions.width}x${webJpeg.metadata.outputDimensions.height}`
    );
    console.log(
      `   Compression: ${webJpeg.metadata.fileSize.compressionRatio}:1`
    );

    // ============== Á§∫‰æã 2ÔºöÂàõÂª∫Áº©Áï•ÂõæÁºìÂÜ≤Âå∫ ==============
    console.log("\nüîç Creating thumbnail buffer...");
    const thumbnail = await processor.createThumbnailJPEGBuffer({
      quality: 85,
      maxSize: 300, // ‰ªªÊÑèËæπÊúÄÂ§ß 300px
    });

    console.log(`‚úÖ Thumbnail created: ${thumbnail.buffer.length} bytes`);
    console.log(
      `   Size: ${thumbnail.metadata.outputDimensions.width}x${thumbnail.metadata.outputDimensions.height}`
    );

    // ============== Á§∫‰æã 3Ôºö‰∏∫Â≠òÂÇ®ÂàõÂª∫È´òË¥®ÈáèÁºìÂÜ≤Âå∫ ==============
    console.log("\nüé® Creating high-quality buffer...");
    const highQuality = await processor.createJPEGBuffer({
      quality: 95, // È´òË¥®Èáè
      // ‰∏çË∞ÉÊï¥Â§ßÂ∞è - ‰øùÊåÅÂéüÂßãÂ∞∫ÂØ∏
    });

    console.log(
      `‚úÖ High-quality JPEG created: ${highQuality.buffer.length} bytes`
    );
    console.log(
      `   Size: ${highQuality.metadata.outputDimensions.width}x${highQuality.metadata.outputDimensions.height}`
    );

    // ============== ÂÆûÁî®‰ΩøÁî®Á§∫‰æã ==============
    console.log("\nüí° Practical Usage Examples:\n");

    // Á§∫‰æã 1Ôºö‰øùÂ≠òÂà∞Êñá‰ª∂ÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
    console.log("1Ô∏è‚É£ Save buffer to file:");
    console.log("```javascript");
    console.log('fs.writeFileSync("output.jpg", webJpeg.buffer);');
    console.log("```\n");

    // Á§∫‰æã 2ÔºöÈÄöËøá HTTP ÂèëÈÄÅÔºàExpress.jsÔºâ
    console.log("2Ô∏è‚É£ Send via HTTP response:");
    console.log("```javascript");
    console.log('app.get("/image", async (req, res) => {');
    console.log(
      "    const result = await processor.createJPEGBuffer({ quality: 85 });"
    );
    console.log('    res.set("Content-Type", "image/jpeg");');
    console.log("    res.send(result.buffer);");
    console.log("});");
    console.log("```\n");

    // Á§∫‰æã 3Ôºö‰∏ä‰º†Âà∞‰∫ëÂ≠òÂÇ®
    console.log("3Ô∏è‚É£ Upload to cloud storage:");
    console.log("```javascript");
    console.log(
      "const result = await processor.createJPEGBuffer({ quality: 90 });"
    );
    console.log('await bucket.file("image.jpg").save(result.buffer, {');
    console.log('    metadata: { contentType: "image/jpeg" }');
    console.log("});");
    console.log("```\n");

    // Example 4: Convert to Base64 for data URLs
    console.log("4Ô∏è‚É£ Convert to Base64 data URL:");
    console.log("```javascript");
    console.log(
      "const result = await processor.createJPEGBuffer({ quality: 85 });"
    );
    console.log('const base64 = result.buffer.toString("base64");');
    console.log("const dataUrl = `data:image/jpeg;base64,${base64}`;");
    console.log("```\n");

    // Example 5: Stream to another process
    console.log("5Ô∏è‚É£ Stream to another process:");
    console.log("```javascript");
    console.log('const { Readable } = require("stream");');
    console.log(
      "const result = await processor.createJPEGBuffer({ quality: 85 });"
    );
    console.log("const stream = Readable.from(result.buffer);");
    console.log("stream.pipe(otherProcess.stdin);");
    console.log("```\n");

    // ============== PERFORMANCE COMPARISON ==============
    console.log("‚ö° Performance Benefits:");
    console.log("‚Ä¢ No filesystem I/O - faster processing");
    console.log("‚Ä¢ Direct memory operations");
    console.log("‚Ä¢ Perfect for serverless/cloud functions");
    console.log("‚Ä¢ Reduced disk space usage");
    console.log("‚Ä¢ Better for concurrent processing\n");

    // ============== FORMAT COMPARISON ==============
    console.log("üé® Try different formats:");
    console.log("```javascript");
    console.log("// Modern WebP format (smaller file size)");
    console.log(
      "const webp = await processor.createWebPBuffer({ quality: 80 });"
    );
    console.log("");
    console.log("// Next-gen AVIF format (even smaller)");
    console.log(
      "const avif = await processor.createAVIFBuffer({ quality: 50 });"
    );
    console.log("");
    console.log("// Lossless PNG");
    console.log(
      "const png = await processor.createPNGBuffer({ compressionLevel: 6 });"
    );
    console.log("```\n");

    // Save examples to files for testing
    const baseName = inputFile.split(/[/\\]/).pop().split(".")[0];
    fs.writeFileSync(`${baseName}_web.jpg`, webJpeg.buffer);
    fs.writeFileSync(`${baseName}_thumb.jpg`, thumbnail.buffer);
    fs.writeFileSync(`${baseName}_hq.jpg`, highQuality.buffer);

    console.log("üíæ Example files saved:");
    console.log(`   ‚Ä¢ ${baseName}_web.jpg (${webJpeg.buffer.length} bytes)`);
    console.log(
      `   ‚Ä¢ ${baseName}_thumb.jpg (${thumbnail.buffer.length} bytes)`
    );
    console.log(`   ‚Ä¢ ${baseName}_hq.jpg (${highQuality.buffer.length} bytes)`);

    // Cleanup
    await processor.close();
    console.log("\n‚úÖ Complete! Your images are ready to use in memory.");
  } catch (error) {
    console.error("\n‚ùå Error:", error.message);
    console.error("\nMake sure you have:");
    console.error("1. Built the addon: npm run build");
    console.error("2. Installed Sharp: npm install sharp");
    console.error("3. Provided a valid RAW file");
  }
}

// Usage instructions
if (process.argv.length < 3) {
  console.log("Usage: node simple-buffer-example.js <path-to-raw-file>");
  console.log(
    "Example: node simple-buffer-example.js ../sample-images/IMG_1234.CR2"
  );
  process.exit(1);
}

const inputFile = process.argv[2];
simpleBufferExample(inputFile);
